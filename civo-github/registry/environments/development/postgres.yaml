apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: dev-postgres
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: '45'
spec:
  project: default
  source:
    repoURL: 'https://charts.bitnami.com/bitnami'
    chart: postgresql
    targetRevision: 13.1.4
    helm:
      values: |-
        auth:
          existingSecret: postgres-secrets
        primary:
          initdb:
            scriptsConfigMap: postgres-initdb
          extraEnvVarsSecret: postgres-secrets
  destination:
    name: <WORKLOAD_CLUSTER_NAME>
    namespace: development
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-secrets
  namespace: development
  annotations:
    argocd.argoproj.io/sync-wave: '0'
spec:
  dataFrom:
    - extract:
        key: /development/postgres
  refreshInterval: 10s
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault-kv-secret
  target:
    name: postgres-secrets
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: postgres-initdb
  namespace: development
data:
  init.sh: |
    #!/bin/bash

    set -e
    set -u

    USER_POSTGRES=postgres

    # use admin password from env to execute psql commands
    export PGPASSWORD="$POSTGRES_PASSWORD"

    # we created a special readonly user that will be granted rights to view all databases
    ROLE_AND_USER_READ_ACCESS=read-access

    function create_read_role_and_user() {
      echo "Creating read-only role (with user) to access to all databases within the cluster..."
      psql -v ON_ERROR_STOP=1 --username "$USER_POSTGRES" <<-EOSQL
        CREATE ROLE "$ROLE_AND_USER_READ_ACCESS" WITH LOGIN NOINHERIT NOCREATEDB NOCREATEROLE NOSUPERUSER PASSWORD '${PG_READ_ACCESS_PASSWORD}';
    EOSQL
    }

    function create_databases_and_grant_privileges() {
      local DATABASES=(
        "APICURIO_REGISTRY"
        "SOON_MARKET_INTERNAL"
        "SOON_MARKET_API"
        "SOONY")

      echo "Creating ${#DATABASES[@]} databases"
      for db in ${DATABASES[@]}; do
        psql -v ON_ERROR_STOP=1 --username "$USER_POSTGRES" <<-EOSQL
          CREATE DATABASE "$db";
    EOSQL
        # secret in vault must follow this pattern
        userpw="PG_${db}_PASSWORD"
        psql -v ON_ERROR_STOP=1 --username "$USER_POSTGRES" <<-EOSQL
          CREATE USER "$db" WITH PASSWORD '${!userpw}';
    EOSQL
        echo "Created database & user: $db"
        grant_read_access "$db"
      done
    }

    # grant read access within given database, schema public
    function grant_read_access() {
      local DATABASE=$1
      psql -v ON_ERROR_STOP=1 --username "$USER_POSTGRES" -d "$DATABASE" <<-EOSQL
        GRANT CONNECT ON DATABASE "$DATABASE" TO "$ROLE_AND_USER_READ_ACCESS";
        GRANT USAGE ON SCHEMA public TO "$ROLE_AND_USER_READ_ACCESS";
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO "$ROLE_AND_USER_READ_ACCESS";
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON SEQUENCES TO "$ROLE_AND_USER_READ_ACCESS";
    EOSQL
      echo "Granted read-only access to database: $DATABASE"
    }

    echo "Executing custom initdb ..."
    create_read_role_and_user
    create_databases_and_grant_privileges